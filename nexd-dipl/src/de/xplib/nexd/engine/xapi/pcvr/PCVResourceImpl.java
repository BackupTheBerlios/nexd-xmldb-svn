/*
 * Project: nexd 
 * Copyright (C) 2005  Manuel Pichler <manuel.pichler@xplib.de>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/*
 * $Log: PCVResourceImpl.java,v $
 * Revision 1.2  2005/05/11 17:31:40  nexd
 * Refactoring and extended test cases
 *
 * Revision 1.1  2005/05/08 11:59:33  nexd
 * restructuring
 *
 * Revision 1.5  2005/04/22 14:59:41  nexd
 * SOAP support and performance update.
 *
 * Revision 1.4  2005/04/13 19:06:32  nexd
 * Minor API changes and a documentation update.
 *
 * Revision 1.3  2005/03/31 12:08:40  nexd
 * Advanced VCL support
 *
 * Revision 1.2  2005/03/14 12:22:49  nexd
 * Heavy javadoc, checkstyle and eclipse todo-Task session.
 *
 */
package de.xplib.nexd.engine.xapi.pcvr;

import org.apache.commons.collections.FastArrayList;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.ContentHandler;
import org.xmldb.api.base.ErrorCodes;
import org.xmldb.api.base.XMLDBException;

import de.xplib.nexd.api.VirtualCollection;
import de.xplib.nexd.api.pcvr.PCVResource;
import de.xplib.nexd.engine.xapi.AbstractCollection;
import de.xplib.nexd.engine.xapi.AbstractXMLResource;
import de.xplib.nexd.xml.DOMDocumentI;

/**
 * <p>This class implements the pre compiled virtual resource.</p>
 *  
 * @author Manuel Pichler <manuel.pichler@xplib.de>
 * @version $Revision: 1.2 $
 */
public class PCVResourceImpl 
    extends AbstractXMLResource 
    implements PCVResource {
    
    /**
     * <p>The database paths of all referenced <code>
     * {@link org.xmldb.api.base.Collection}</code> instances.</p>
     */
    private String[] referenceCollections = null;
    
    /**
     * <p>The full qualified database paths of all linked <code>
     * {@link org.xmldb.api.modules.XMLResource} instances.</p>
     */
    private String[] resRefs = null;
    
    /**
     * <p>Constructor.</p>
     * 
     * @param parentIn The parent <code>VirtualCollection</code> instance.
     * @param contentIn <p>The precompiled 
     *                  {@link _de.xplib.nexd.api.VirtualResource} content as a 
     *                  DOM {@link Document}</p>.
     * @param idIn <p>The autogenerated resource resId.</p>
     */
    public PCVResourceImpl(final VirtualCollection parentIn,
                           final Document contentIn,
                           final String idIn) {
        super((AbstractCollection) parentIn, idIn);
        
        this.content = contentIn;
        if (this.content instanceof DOMDocumentI) {
            ((DOMDocumentI) this.content).setDocumentId(idIn);
        }
    }
    
    /**
     * <p>Returns an array with all referenced <code>
     * {@link org.xmldb.api.base.Collection}</code> instances. A <code>
     * {@link org.xmldb.api.base.Collection} is identified by its database
     * path.</p>
     * 
     * @return <p>The database paths of all referenced <code>
     *         {@link org.xmldb.api.base.Collection}</code> instances.</p>
     * @see _de.xplib.nexd.api.pcvr.PCVResource#getReferenceCollections()
     */
    public String[] getReferenceCollections() {
        if (this.referenceCollections == null) {
            this.setupReferences();
        }
        
        // copy, don't return the original
        String[] refs = new String[this.referenceCollections.length];
        for (int i = 0; i < refs.length; i++) {
            refs[i] = this.referenceCollections[i];
        }
        
        return refs;
    }
    
    /**
     * <p>Returns an array with all <code>
     * {@link org.xmldb.api.modules.XMLResource}</code> instances, that are used
     * by this <code>PCVResource</code>. They are identified by their full 
     * qualified database path.</p> 
     * 
     * @return <p>The full qualified database paths of all linked <code>
     *         {@link org.xmldb.api.modules.XMLResource} instances.</p>
     * @see _de.xplib.nexd.api.pcvr.PCVResource#getReferenceResources()
     */
    public String[] getReferenceResources() {
        if (this.resRefs == null) {
            this.setupReferences();
        }
        
        // copy, don't return the original
        String[] refs = new String[this.resRefs.length];
        for (int i = 0; i < refs.length; i++) {
            refs[i] = this.resRefs[i];
        }
        
        return refs;
    }
    
    /**
     * <Some description here>
     * 
     * @param contentIn
     * @throws org.xmldb.api.base.XMLDBException
     * @see org.xmldb.api.modules.XMLResource#setContentAsDOM(
     *      org.w3c.dom.Node)
     */
    public void setContentAsDOM(final Node contentIn) throws XMLDBException {
        throw new XMLDBException(
                ErrorCodes.NOT_IMPLEMENTED, 
                "PCVResource doesn't allow content changes.");
    }
    /**
     * <Some description here>
     * 
     * @return
     * @throws org.xmldb.api.base.XMLDBException
     * @see org.xmldb.api.modules.XMLResource#setContentAsSAX()
     */
    public ContentHandler setContentAsSAX() throws XMLDBException {
        throw new XMLDBException(
                ErrorCodes.NOT_IMPLEMENTED, 
                "PCVResource doesn't allow content changes.");
    }
    
    /**
     * <Some description here>
     * 
     * @param value
     * @throws org.xmldb.api.base.XMLDBException
     * @see org.xmldb.api.base.Resource#setContent(java.lang.Object)
     */
    public void setContent(final Object value) throws XMLDBException {
        throw new XMLDBException(
                ErrorCodes.NOT_IMPLEMENTED, 
                "PCVResource doesn't allow content changes.");
    }
    
    /**
     * <p>Helper method that reads all {@link org.xmldb.api.base.Collection}
     * and {@link org.xmldb.api.modules.XMLResource} references from 
     * {@link #content}.</p>
     */
    private void setupReferences() {

        if (this.content == null) {
            return;
        }
        
        NodeList list = ((Document) this.content).getElementsByTagName(
                NAMESPACE_PREFIX + ":" + NAME_COLLECTION);
        
        FastArrayList colls = new FastArrayList();
        colls.setFast(true);
        
        FastArrayList ress = new FastArrayList();
        ress.setFast(true);
        
        for (int i = 0, l = list.getLength(); i < l; i++) {
            Element elem = ((Element) list.item(i));
            String coll  = elem.getAttribute(
                    ATTR_COLLECTION_MATCH);
            
            colls.add(coll);
            
            NodeList children = elem.getChildNodes();
            for (int j = 0, l1 = children.getLength(); j < l1; j++) {
                Node child = children.item(j);
                if (child instanceof Element 
                        && child.getNodeName().equals(QNAME_RESOURCE)) {
                    
                    String res = coll + "/" + ((Element) child).getAttribute(
                            ATTR_RESOURCE_REFERENCE);
                    
                    ress.add(res.replaceAll("//", "/"));
                }
            }
        }
        
        this.referenceCollections = (String[]) colls.toArray(
                new String[colls.size()]);
        this.resRefs  = (String[]) ress.toArray(new String[colls.size()]);
    }
}
